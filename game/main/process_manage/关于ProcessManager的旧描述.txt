
#子节点或许可以挂点效果之类的……？
#本来是round_manager，但是后来想了想，有些技能在游戏开始、第一回合前就要起作用（如天角、其他种族）
#把“开始游戏”时的技能检查放在main里就相当于“让老板干事”（划掉）分工不明确了
#所以，游戏整个流程的控制函数还是全放这里算了
#不过round确实可以看作一种单位，另外写个类吧

#呃，process manager好像还可以有一些特别的单独的子进程？（比如效果牌行为）……又或者放在round里面？……
#又或者另外加一个“Action Manager……？”或者就是effect里面的oneshot？
var character_places:Array[CharacterPlace]
#CharacterPlace好像也可以直接放在这里……？相当于直接操作了？
#那么EffectManager实际上也能合并进来？
#…………主要其实还是因为，进程的程序影响总是被各种技能或效果影响
#如果分开写，中间可就不方便插入——实际上就需要信号查询并且await吧……会挺复杂
#但是如果集中起来，反而好处理一点，并且数据互通吧

#而本身“牌库”的信息以及“地图”的信息则一般不会影响游戏正常程序流程
#只有事件、技能、效果牌等等会需要这些东西吧……
#那么，大概会需要一个“大字典”了_(:3JZ)_
#不过好像character_places就完成一半了，余下还有“全局事件？……或者只要给到每个玩家就可以了？

func init(players:Array[Player]):
	#这里主要是玩家数的影响吧……
	#然后据此确定CharacterPlaces的数量
	#如果玩家顺序要随机，那么传入之前就随机掉吧……不然返回的数据可能对不上
	#…………好像Players的信息其实可以直接挂在CharacterPlace当中吧
	pass


func start_game():
	#选角色
	#所有玩家选完后，使用游戏开始就触发的角色技能
	#并且抽牌
	pass


func game_over():
	#结算之类的……用处一般吧？——毕竟能调用这个函数一般都是已经判断“游戏结束”完成了
	#不过要注意这里可以争第二第三这样的……所以并不是收集品齐了就走
	pass
