血条原本是卡的，不过这里就不用了
骰子需要简单实现一下

————————————选自starting中文本
本来游戏是不支持单人的，但是为了初期测试，应该也可以先测试单人状态，而后再继续实现多人吧
单人能实现的事：
事件、装备、移动……恢复？
攻击不能打队友……不过初期也可以如此测试：对自己发牌

测试完毕后，再【实现多人】，再来【限制出牌对象】

————————————

因此，这个demo要实现的东西：
	正常运行游戏
		单人选择角色
		自己对自己出牌的效果
		四种攻击（包含“真伤”）、几件装备、几个恢复
		地图系统
		事件系统
		有限牌堆，打乱
		（牌堆：模、奖、事、弃）
——————————————————————
最小版本：
	基本角色，无技能

————————————————————————
…………
但是有个问题……实际上这些卡大部分都是设计成可以直接用在游戏中的，还有必要再建立一个副本来吗？
直接传递Node如何？
或者……“图像”问题……？？

战场是“侧栏”……？

——————————————————————————
目前list列表里有按包分类了
不过后面pack里选取牌的种类可以从中选（根据路径）
——————————————————————
Object大概用于数据存储结构比较好，动态处理还是交给manage吧

————————————————————————
或者，UI自己来抓数据，而不是靠其他来传递之类？
————————————————————————
2022.8.20
重大改动：ability实现方式由节点方案改为每个角色写代码

————————————————————————
平滑动画……除了用lerp编程，或许还可以试试新出的tween？（而且灵动）

发现一个坑，event.is_action()，会同时把pressed和released算入
而正常情况下一般都是is_action_pressed()比较好，包括滚动区域的滚动默认也是检测pressed
所以还是写完吧，往往有很多unhandled的released事件……

————————————————————————————————
另外注意一下唯一名的写法
相对路径是$"xxxx"这样的
但是唯一名是%xxxx
相当于把$换成%了

————————————————————————
考虑一下实现顺序吧……
变化主要在“事件”以及“角色技能”上，其次是装备、效果牌/恢复牌，其他的相对平常

数据控制：
	地图选点

ps：有一个事件可以触发地图的变化……存一个“还原”吧？
事件函数：发生、解除（解除时进行还原）

——————————————————————————————
下面把侧栏也实现一下吧
或者……先做一下“移动”……？
不过最好还是先把多人游戏架构准备一下吧……？（还是算了，先做单人）

技能方面……有主动有被动，不过Demo阶段估计先放一放

————————
现在“角色行动”方面有个问题……
发送的信号，肯定要在main或者character_manager中“中转”一次吧……（或者直接操作）
而character_place直接就行动吗……要不要综合一下数据之类的……？
不过好像直接单“角色位”动态操作也不错？

	main:
		数据综合，条件判断方便，在出结果时直接调用管理者的函数便是
	character_manager:
		character_place的统一管理，同样不适合“需要看情况的操作”
	character_place:
		这一层操作，便已经难以考虑到外部“特殊效果”时各类特殊情况
		这一层还是直接作“真实操作”（无条件），把条件放在外部吧
		——不过，目前“出牌”、“移动”之类的“初始/计划操作”，大概还是有放在这一层的可能吧……？
		——然而想想还是算了……毕竟每个“基本操作”实际上都可能受效果影响，不如直接传给main处理
		（即使是从character_place发动函数了，还是要返回main去看看有没有“特殊情况”）
——————————————————————————————————————————————————————————
进度汇报（2022.8.23）
	由于需要准备考试了，这个项目多半是需要搁置一段时间
	目前最没有思路的是多人联机的实现方法（似乎有个“生成”节点和“同步”节点？）
	第二难的应该就是特殊状态效果/技能的实现方式，以及配套的UI
	地图选点有思路，不过难度其实在于“路径”/“范围”的表示吧……
	回合逻辑应该能比较好做
	比较担心的是隔段时间后，自己就忘了那些地方做过，那些地方还没实现吧……
	先拍个视频吧？
	此外，“多人联机”可以早点学学
	（周末可能不会有足够时间……？国庆节来吧？）
	（实在没有思路的话也可以先把牌库装一装）
	https://www.youtube.com/watch?v=nQ4P3ogXp2Q
	
	————————————————————————
	2022.9.24
	现在的组织结构，应该是可以把基础版给做出来了的（图片文件位置已经放好了）
	那么便先实现基础版的全部内容，然后再调整做出扩展包内容吧
	
	呃，现在已经把卡牌图片全部重命名了
	
	下面把基础包的事件牌、手牌都包装成场景吧
	（之后逐渐实现功能……单牌功能以及调用（“试点”），接着再“推广”）
	
——————————————————————————————————
2022.9.25
想到一个方案：效果注册表
	以游戏事件划分“栏”，效果要在什么时候检查触发，便在相应的“栏”下填上自己的“联系方式”，
	并且可以附带一些“联系条件”（如，此次作用的对象得是特定对象才能去联系）
	
	每次发生事件，注册表就遍历“通知”相应栏的“效果”，让“效果”依次发挥作用
	
	如果有效果存在“二次检查”的要求（如“没有阻止”），那么效果可以再次调用注册表
	——不过一般会是在另外的栏了
	（算是一种“代理”）
………………………………………………好像之前也是这么设计的？（？忘了属于是）

详情见”res://game/effect_library/思路/”效果“生效逻辑-补充.txt“ 以及旁边的图
————————————————————————————
#比如说大麦克，有一个被动技能
#但是新设计模式下，被动技能被视作一种”加成效果“
#于是只有挂载节点到它所在的Ability下
#
#然后又要设置被动技能的自动注册……这个应该在CharacterBasic实现
#
#这样说吧，effect其实也应该再分出一些多态（子类）
#而这些子类由各自有自己的独特属性，以及自己的独特方法
#这样应该就可以解决传递”值“的问题吧
#而且也能让manager少点负担之类的
#
#manager主要要做的，是实现trigger的迭代/递归过程
